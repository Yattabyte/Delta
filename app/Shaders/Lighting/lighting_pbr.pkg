#define M_PI 3.14159f

layout (binding = 0) uniform sampler2D ColorMap;
layout (binding = 1) uniform sampler2D ViewNormalMap;
layout (binding = 2) uniform sampler2D SpecularMap;
layout (binding = 3) uniform sampler2D DepthMap;

#package "camera"

struct ViewData {
	vec4 World_Pos;
	vec4 View_Pos;
	vec3 World_Normal;
	vec3 View_Normal;
	vec3 Albedo;
	float Metalness;
	float Roughness;
	float View_Depth;
	float View_AO;
};

void GetFragmentData(in vec2 TexCoord, out ViewData data)
{
	const vec4 Texture1				= texture(ColorMap, TexCoord);
	const vec4 Texture2				= texture(ViewNormalMap, TexCoord);
	const vec4 Texture3				= texture(SpecularMap, TexCoord);
	const vec4 Texture4				= texture(DepthMap, TexCoord);
	
	data.Albedo 					= Texture1.rgb;
	data.View_Normal				= Texture2.rgb;
	data.Metalness					= Texture3.r;
	data.Roughness					= Texture3.g;
	float View_Height				= Texture3.b;
	data.View_AO					= Texture3.a;
	data.View_Depth					= Texture4.r;
	
	data.View_Pos					= pMatrix_Inverse * vec4(vec3(TexCoord, data.View_Depth) * 2.0f - 1.0f, 1.0f);
    data.World_Pos 					= vMatrix_Inverse * data.View_Pos;
	data.View_Pos 					= data.View_Pos / data.View_Pos.w;
	data.World_Pos 					= data.World_Pos / data.World_Pos.w;
    data.World_Normal 				= normalize((vMatrix_Inverse * vec4(data.View_Normal, 0))).xyz;
}

// Calculates the Normalized Distribution Function term of the BRDF specular lighting equation
float NDF_GGX_TrowBridge_Reitz(in float NdotH_2, in float Alpha_2)
{
	float Den						= (NdotH_2 * (Alpha_2 - 1.0f) + 1.0f);
	Den								= M_PI * (Den * Den);
	return							Alpha_2 / max(Den, 0.00001f);	
}

// Calculates the Fresnel term of the BRDF specular lighting equation
vec3 Fresnel_Schlick(in vec3 f0, in float AdotB) 
{
    return 							f0 + (1.0f - f0) * pow(1.0f - AdotB, 5.0f);
}

// Calculates the Geometric Shadowing term of the BRDF specular lighting equation
float Geometry_Schlick_Beckmann(in float Alpha, in float NdotL, in float NdotV)
{
	const float k 					= Alpha * sqrt(2.0f / M_PI);
    const float one_minus_k 		= 1.0f - k;
	return 							( NdotL / (NdotL * one_minus_k + k) ) * ( NdotV / (NdotV * one_minus_k + k) );
} 

// Calculates the direct diffuse contribution
vec3 CalculateDiffuse(in vec3 Albedo)
{				
	return							Albedo / M_PI;   
} 

// Calculates the direct specular contribution
vec3 BRDF_Specular(in float Roughness, in vec3 Albedo, in float Metalness, in vec3 Normal, in vec3 LightDirection, in float NdotL, in float NdotV, in vec3 ViewDirection, out vec3 Fs)
{		
	const vec3 HalfVector			= normalize(LightDirection + ViewDirection);	
    const float NdotH 				= max(dot(Normal, HalfVector), 0.0f);
    const float NdotH_2 			= NdotH * NdotH;
	const float VdotH 				= clamp(dot(HalfVector, LightDirection), 0.0f, 1.0f);
	const float Alpha				= Roughness * Roughness;
	const float Alpha_2				= Alpha * Alpha;
	
	// Normal Distribution Function 
	const float D					= NDF_GGX_TrowBridge_Reitz(NdotH_2, Alpha_2);
	
	// Fresnel
	const vec3 F0					= mix(vec3(0.03f), Albedo, Metalness);
    Fs 								= Fresnel_Schlick(F0, VdotH);
	
	// Geometric Shadowing
	const float G					= Geometry_Schlick_Beckmann(Alpha, NdotL, NdotV);
	
	const vec3 nominator			= (Fs * D * G);
	const float denominator			= 4.0f * NdotL * NdotV;
	return 							max(nominator / denominator, 0.00001f); 
}