vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

float CalcRandom(in vec4 seed) 
{
	const float dot_product 		= dot(seed, vec4(12.9898,78.233,45.164,94.673));
    return 							fract(sin(dot_product) * 43758.5453);
}

void CalcPositionFromDepth(in vec2 TexCoord, out vec4 ViewPosition, out vec4 WorldPosition)
{	
	// Get the depth of the pixel at the tex coordinates
    const vec3 rawPosition 			= vec3(TexCoord, texture(DepthMap, TexCoord).r);
	
	// Convert from (0, 1) range to (-1, 1)
	const vec4 ScreenSpacePosition 	= vec4( rawPosition * 2.0f - 1.0f, 1.0f);

	// Undo Perspective & View transformations
    ViewPosition 					= pMatrix_Inverse * ScreenSpacePosition;
	WorldPosition 					= vMatrix_Inverse * ViewPosition; 
	
	// Perform perspective divide
	ViewPosition 					= vec4( (ViewPosition.xyz / ViewPosition.w), 1.0f );	
	WorldPosition 					= vec4( (WorldPosition.xyz / WorldPosition.w), 1.0f ); 
}

vec3 CalcNormalFromView(in vec2 TexCoord)
{
	const vec4 ViewNormal			= vec4(texture(ViewNormalMap, TexCoord).xyz, 0);
    const vec3 WorldNormal 			= normalize((vMatrix_Inverse * ViewNormal)).xyz;
	return WorldNormal;
}