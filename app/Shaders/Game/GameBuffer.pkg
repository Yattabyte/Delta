#package "CameraBuffer"
#define M_PI 3.1415926535897932384626433832795
struct MusicStruct {
	float beat;
};
struct IntroStruct {
	float powerOn;
	float powerSecondary;
	int countDown;
};
layout (std430, binding = 8) readonly buffer BoardBuffer {	
	uint types[12*6];
	float gravityOffsets[12*6];
	float lifeLinear[12*6];
	float lanes[6];
	vec3 colorScheme;
	ivec2 playerCoords;
	float heightOffset;
	float sysTime;
	float gameWave;
	float excitementLinear;
	float shakeLinear;
	float scoreAnimLinear;
	float timeAnimLinear;
	int score;
	int highlightIndex;
	int multiplier;
	int stopTimer;
	int gameTimer;
	float nearingTop;
	MusicStruct music;
	IntroStruct intro;
};

float calcPulseAmount(float yPos) {
	const float waveAmt = 0.5f * (sin((gameWave + -length(yPos / CameraDimensions.y)) * M_PI)) + 0.5f;
	const float maxBrightness = 1.5f;
	const float minBrightness = 0.75f;
	return (maxBrightness - (minBrightness * (1.0f - ((1.0f - waveAmt) * (1.0f - waveAmt))))) + excitementLinear;
}